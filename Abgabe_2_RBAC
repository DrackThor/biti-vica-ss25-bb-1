
# Role-Based Access Control (RBAC)

## Einleitung

In der IT-Sicherheit ist es wichtig, den Zugriff auf Systeme, Daten und Funktionen gezielt zu steuern. Eine bewährte Methode dafür ist RBAC – Role-Based Access Control. Dabei werden Zugriffsrechte nicht direkt Benutzern zugewiesen, sondern über Rollen, denen bestimmte Berechtigungen zugeordnet sind. Das macht die Verwaltung von Rechten einfacher, nachvollziehbarer und sicherer.

---

## Was ist RBAC?

RBAC (Role-Based Access Control) ist ein Berechtigungsmodell, bei dem die Zugriffssteuerung auf der Basis von Rollen erfolgt. Eine Rolle ist eine Sammlung von Berechtigungen, die typischerweise einer Funktion oder Position in einem Unternehmen entspricht – z. B. „Buchhalter“, „Systemadministrator“ oder „Leser“.

Benutzer erhalten ihre Rechte nicht direkt, sondern durch Zuweisung zu einer oder mehreren Rollen. So bleibt die Rechtevergabe zentral und strukturiert.

---

## Kontext & Anwendung

RBAC findet sich in zahlreichen IT-Systemen und Plattformen:

- **Cloud-Plattformen:** AWS IAM, Microsoft Azure, Google Cloud
- **Betriebssysteme:** Linux (sudo, Gruppenrechte), Windows (Active Directory)
- **Container-Plattformen:** Kubernetes RBAC zur Steuerung des API-Zugriffs
- **Datenbanksysteme:** PostgreSQL, Oracle, SQL Server
- **Webanwendungen:** Benutzerrollen wie Admin, Editor, Viewer

RBAC eignet sich besonders für Organisationen mit vielen Benutzern und klar definierten Aufgabenverteilungen. Es unterstützt Prinzipien wie „Least Privilege“ und „Need-to-know“.

---

## Technische Funktionsweise

RBAC folgt einem einfachen Prinzip:  
**Benutzer → Rolle → Berechtigung**

### Rollenmodell

- Rollen fassen mehrere Berechtigungen logisch zusammen
- Ein Benutzer kann mehreren Rollen gleichzeitig angehören
- Rollen können bestimmten Gruppen, Abteilungen oder Funktionen entsprechen

### Zugriffskontrolle

- Zugriff auf eine Ressource wird nur gewährt, wenn die zugewiesene Rolle die entsprechende Berechtigung besitzt
- Änderungen werden zentral über die Rolle gesteuert, nicht über einzelne Benutzer

---

## Protokolle & Standards

RBAC ist kein Protokoll, sondern ein Modell. Es wird jedoch durch verschiedene Tools und Frameworks umgesetzt:

- **LDAP / Active Directory:** Verwaltung von Benutzergruppen und Rechten
- **Kubernetes:** YAML-basierte RBAC-Definitionen
- **Cloud IAM:** JSON-basierte Policies (z. B. AWS, GCP)
- **Unix/Linux:** Gruppen und sudo-Rechte

---

## Tools & Produkte

Beispiele für Systeme mit RBAC-Unterstützung:

- **Microsoft Azure Role-Based Access Control**
- **AWS IAM (Identity and Access Management)**
- **Kubernetes Role / ClusterRole / RoleBinding**
- **PostgreSQL Rollen- und Rechteverwaltung**
- **Grafana Dashboard-Zugriffsrechte**

---

## Vorteile von RBAC

- **Zentrale Steuerung:** Rechtevergabe über Rollen statt einzelne Benutzer
- **Sicherheit:** Unterstützung für Least Privilege
- **Nachvollziehbarkeit:** Audit-Logs zeigen, wer welche Rolle hatte
- **Effizienz:** Leichtes Onboarding neuer Mitarbeiter durch Rollenvergabe
- **Skalierbarkeit:** Geeignet für große Systeme mit vielen Usern

---

## Mögliche Herausforderungen

- Zu viele Rollen (Role Explosion)
- Unklare oder zu breite Rollendefinitionen
- Mangelhafte Dokumentation
- Unzureichende Rechtestruktur bei komplexen Organisationen

### Best Practices

- Rollen dokumentieren und regelmäßig überprüfen
- Keine direkten Rechte auf Benutzer vergeben
- Least Privilege strikt umsetzen
- Automatisierte Rollenprüfung bei Rollenwechseln

---

## Vergleich: RBAC vs. ABAC

| Merkmal         | RBAC                             | ABAC (Attribute-Based Access Control)        |
|-----------------|----------------------------------|----------------------------------------------|
| Grundlage       | Rollen                           | Attribute (z. B. Zeit, Standort, Rolle)       |
| Flexibilität    | Mittel                           | Hoch                                         |
| Verwaltung      | Einfach                          | Komplex                                      |
| Einsatzgebiet   | Klassische Unternehmens-IT       | Cloud-native Anwendungen, dynamische Szenarien |

---

## Beispielhafte Darstellung

```plaintext
[ Benutzer: Lisa ]
     ↓
[ Rolle: Projektmanagerin ]
     ↓
[ Rechte: Lesen/Schreiben von Projektplänen, Genehmigen von Urlaubsanträgen ]
```

### Kubernetes RBAC (vereinfacht)

```yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: dev
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
```

---

## Fazit

RBAC ist ein standardisiertes, effektives Modell zur Zugriffskontrolle in IT-Systemen. Es vereinfacht die Verwaltung, reduziert Risiken und stärkt die IT-Sicherheit durch konsistente Rechtevergabe. Obwohl in dynamischeren Umgebungen oft ABAC ergänzt wird, bleibt RBAC die bewährte Grundlage für Rollen- und Berechtigungsmanagement in klassischen und modernen IT-Landschaften.

---

## Quellen

- https://docs.microsoft.com/en-us/azure/role-based-access-control/overview
- https://kubernetes.io/docs/reference/access-authn-authz/rbac/
- https://aws.amazon.com/iam/
